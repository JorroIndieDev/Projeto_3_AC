C51 COMPILER V9.60.7.0   PARKING_LOT_C                                                     05/26/2025 17:42:53 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE PARKING_LOT_C
OBJECT MODULE PLACED IN .\Objects\Parking_lot_C.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE Parking_lot_C.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\List
                    -ings\Parking_lot_C.lst) TABS(2) OBJECT(.\Objects\Parking_lot_C.obj)

line level    source

   1          #include <reg51.h>
   2          
   3          
   4          #define second 5000 // 5000 ticks * 200us = 1s
   5          #define servoZero 3   // servo zero, starting pos = 3 * 200us = 600us
   6          #define downTime 10 // 10 ticks * 200us = 20ms
   7          // Actuatures
   8          sbit Green = P1^0;
   9          sbit Red = P1^1;
  10          sbit Yellow = P1^2;
  11          sbit Barr = P1^3;
  12          
  13          // Sensors
  14          sbit Bot_1 = P3^2;
  15          sbit Bot_2 = P3^3;
  16          sbit Sensor = P1^4;
  17          
  18          // Display
  19          sbit Display_A = P2^0;
  20          sbit Display_B = P2^1;
  21          sbit Display_C = P2^2;
  22          sbit Display_D = P2^3;
  23          
  24          // Sensor and LEDs on the parking spots
  25          sbit S1_L1 = P0^0;
  26          sbit S2_L2 = P0^1;
  27          sbit S3_L3 = P0^2;
  28          sbit S4_L4 = P0^3;
  29          sbit S5_L5 = P0^4;
  30          sbit S6_L6 = P0^5;
  31          sbit S7_L7 = P0^6;
  32          sbit S8_L8 = P0^7;
  33          
  34          unsigned int park_states; // unsingned chr 8 bits, meaning P0.0 .. P0.7
  35          unsigned int Free;  // Free slots in the parking lot
  36          unsigned int i; // increment for counter in for loop (errors occur if the variable is declared inside the 
             -loop)
  37          
  38          
  39          void awaitCar(void);
  40          void delayTicks(unsigned int ticks);
  41          void blinker();
  42          
  43          void main(void){
  44   1        // _init_ the pins
  45   1        P0 = 0xff;
  46   1        P1 = 0xff;
  47   1        P2 = 0x00;
  48   1        P3 = 0xff;
  49   1        delayTicks(servoZero);
  50   1        Barr = 0;
  51   1        
  52   1        while(1){   // main loop
  53   2          park_states = P0; // assign P0 to a readable var
C51 COMPILER V9.60.7.0   PARKING_LOT_C                                                     05/26/2025 17:42:53 PAGE 2   

  54   2          
  55   2          // verify the available parking spots and sends it o the Display
  56   2          Free = 0;
  57   2          
  58   2          for(i = 0; i < 8; i++){ // loop through the 8 slots and increment occupied if any 0 is detected
  59   3            // if park_states and bit[i], then a spot is occupied and 
  60   3            // i is the occupied slot.
  61   3            if(park_states & (1 << i)){ // park_states AND 1 << [i] <- i.e (0000 0100) & (1 << [3]) = true (1 << [3
             -]) = 100
  62   4              Free += 1;
  63   4            }
  64   3          }
  65   2      
  66   2          P2 = Free; // This sends only the 4 bits necessary for the Display A-D
  67   2          // at this point in the program runing the first time no alteratino to any input the display pins should
             - be 0000 1000 = 8
  68   2          // if there are any parking slots available Green else Red
  69   2          if(Free != 0){
  70   3            Green = 0;
  71   3            Red = 1;
  72   3          } else {
  73   3            Green = 1;
  74   3            Red = 0;
  75   3          }
  76   2      
  77   2          // assuming from the assignment there is only one way to enter / exit
  78   2          // all buttons in the diagram activate on a low(0) so !Bot
  79   2          if((Bot_1 == 0 )& !Green){  // if button 1 -> entry Light must be green also
  80   3            awaitCar();
  81   3          } else if(Bot_2 == 0){  // if button 2 -> exit light does not matter 
  82   3            awaitCar();
  83   3          }
  84   2          
  85   2        }
  86   1        
  87   1      }
  88          
  89          void awaitCar(void){
  90   1        while(Sensor == 1);// await sensor response
  91   1        Barr = 1;
  92   1        while(Sensor == 0){blinker();}// if there is a car there wait
  93   1        for(i = 0;i < 10;i++){
  94   2          delayTicks(second);
  95   2        }
  96   1        Barr = 0;
  97   1        Yellow = 1;
  98   1      
  99   1      }
 100          
 101          void blinker(void){
 102   1        Yellow = 0;
 103   1        delayTicks(downTime);
 104   1        Yellow = 1;
 105   1      }
 106          
 107          void delayTicks(unsigned int ticks) {
 108   1          unsigned int i;
 109   1          
 110   1          TMOD = (TMOD & 0xF0) | 0x01;  // Use Timer0 in Mode 1 (16-bit)
 111   1        
 112   1          for (i = 0; i < ticks; i++) {
 113   2              // Each loop = 200us delay
C51 COMPILER V9.60.7.0   PARKING_LOT_C                                                     05/26/2025 17:42:53 PAGE 3   

 114   2              // Timer0 value = 65536 - 200 = 65336 ? 0xFF38
 115   2              TH0 = 0xFF;  // High byte
 116   2              TL0 = 0x38;  // Low byte (0xFF38 = 65528 = 8 ticks, but close enough for 200us with 12MHz)
 117   2      
 118   2              TF0 = 0;     // Clear overflow flag
 119   2              TR0 = 1;     // Start Timer0
 120   2      
 121   2              while (!TF0); // Wait for timer overflow
 122   2      
 123   2              TR0 = 0;     // Stop Timer0
 124   2              TF0 = 0;     // Clear flag again (optional)
 125   2          }
 126   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    241    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      6    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
